{
  "0": {
    "id": 0,
    "title": "404",
    "content": "",
    "url": "/wiki/404/",
    "relUrl": "/404/"
  },
  "1": {
    "id": 1,
    "title": "Adding your collection data",
    "content": "Adding your collection dataBefore adding your collection data, take note of the project’s structure.            directory      purpose                  _data      where raw, unprocessed images and metadata files go. these will not be output to the compiled static site.              _qatar      where the pages for each collection item in the qatar collection were generated. if you have a collection called photos the pages will be generated to a directory _photos.              img/derivatives      where the image derivatives are generated after running the wax:img:derivatives task              js      where the lunr index and UI are generated with the wax:lunr task.  you can keep other local scripts here too.      More information on Jekyll directory and file conventions can be found in the Jekyll documentation.Delete demo data and files and directories generated by wax tasksDelete the following files and directories:  qatar directory within _data/raw_images  qatar.csv file within _data  _qatar directory  img directory  lunr-index.json and lunr-ui.js within js directorySwap in your data  Drag your own directory of images (named after your collection) into _data/raw_images  Drag your own metadata file into _data",
    "url": "/wiki/wax/setting-up-your-site/adding-your-collection-data/",
    "relUrl": "/wax/setting-up-your-site/adding-your-collection-data/"
  },
  "2": {
    "id": 2,
    "title": "Advanced",
    "content": "",
    "url": "/wiki/wax/advanced/",
    "relUrl": "/wax/advanced/"
  },
  "3": {
    "id": 3,
    "title": "Cloning the demo",
    "content": "Cloning the demoOption 1. Download the demo for use with GitHub pages  Change directory into where you’d like your site, e.g., your Desktop:     cd ~/Desktop        Clone the Wax demo repository from the gh-pages branch:     git clone https://github.com/minicomp/wax.git -b 'gh-pages'        Change directory into the site repository and install the dependencies:     cd wax bundle install        Serve the site locally     bundle exec jekyll serve      Option 2. Clone the demo without using GitHub pages  Change directory into where you’d like your site, e.g., your Desktop:     cd ~/Desktop        Clone the Wax demo repository from the master branch:     git clone https://github.com/minicomp/wax.git -b master        Change directory into the site repository and install the dependencies:     cd wax bundle install        Serve the site locally     bundle exec jekyll serve      When the demo site is serving correctly you’re ready to swap in your own content and configuration to make your own exhibition site.",
    "url": "/wiki/wax/setting-up-your-site/cloning-the-demo/",
    "relUrl": "/wax/setting-up-your-site/cloning-the-demo/"
  },
  "4": {
    "id": 4,
    "title": "Contributors",
    "content": "ContributorsThe following list is a start towards the all-contributors specification using  emoji key.                                          mnyrop          📖📝🐛💻🎨🔌✅⚠️📢                                                            elotroalex          📖🐛💻🎨📢✅📢                                                            tcatapano          💻🎨💬                                                            susannalles          📖💡✅                                                            JohannGillium          💻💡                                                            barmintor          🤔💻                                                            rmglade          🤔💡                                                            workergnome          🔌💬                                                            herdofsheep          🐛                                                            epageperron          🐛💬                                                            mdlincoln          🐛💬                                                            ericayhayes          💡🤔                                                            stewartvarner          📋                                                            evanwill          📢🤔💻                                                            dcnb          📢🤔                                                            muziejus          🤔                                                            ktakahata          💡                    ContributeCheck back for forthcoming contributing guides.",
    "url": "/wiki/contributors/",
    "relUrl": "/contributors/"
  },
  "5": {
    "id": 5,
    "title": "wax:derivatives",
    "content": "wax:derivativesThere are two tasks namespaced under wax:derivatives, namely wax:derivatives:simple and wax:derivatives:iiif which represent the two options for generating collection image derivatives. You will only run one of these tasks per collection and you should only need to run it once.wax:derivatives:simplebundle exec rake wax:derivatives:simple YOUR_COLLECTION_NAMEWhen you run the line above for your collection, the task will:      Look for the directory of source images you specified in your _config.yml file under collections &amp;gt; YOUR_COLLECTION_NAME &amp;gt; images &amp;gt; source (See: Updating your configuration)        Generate two copies of each image (full size and thumbnail, with 1140px and 250px widths, respectively) into the directory img/derivatives/YOUR_COLLECTION_NAME        Automatically add two fields (full and thumbnail) to each of your metadata records with the relative paths to the image derivatives.  (e.g., bundle exec rake wax:derivatives:simple qatar)wax:derivatives:iiifbundle exec rake wax:derivatives:iiif YOUR_COLLECTION_NAMEWhen you run the line above for your collection, the task will:      Look for the directory of source images you specified in your _config.yml file under collections &amp;gt; YOUR_COLLECTION_NAME &amp;gt; images &amp;gt; source (See: Updating your configuration)        Generate many IIIF derivatives, image tiles, and JSON representations of the collection items into the directory img/derivatives/YOUR_COLLECTION_NAME.        Automatically add three fields (full, thumbnail, and manifest) to each of your metadata records with the relative paths to the full and thumbnail size image derivatives and the IIIF manifest.  (e.g., bundle exec rake wax:derivatives:iiif qatar)Which one should I use?Simple derivatives            Pros      Cons                  Fewer files to create, manage, and host      Doesn’t handle items with multiple images / pdf format              Loads faster on webpages      Lower quality images, no zooming              Users can copy/download full images      Users can copy/download full images      IIIF derivatives            Pros      Cons                  Image content is interoperable, meaning it is standardized, (re)usable, and citable broadly (see: https://iiif.io/community/faq/#what-is-iiif)      Slow to generate              Image content can leverage embedded metadata      Slower to load on the page than simple derivatives              Can handle multiple images / paged content per collection item      Requires the page to use a JS image viewer              Offers deep zooming of full images with no loss; Images are loaded quickly relative to the high resolution offered      Higher technical overhead, more complex      ",
    "url": "/wiki/wax/running-the-tasks/derivatives/",
    "relUrl": "/wax/running-the-tasks/derivatives/"
  },
  "6": {
    "id": 6,
    "title": "Examples",
    "content": "Examples  Style Revolution: Journal des Dames et des Modes  Barbara Curtis Adachi Collection  The Biggert Collection of Architectural Vignettes  The Sudan Historical Photo Archive  Monument Lab Proposals",
    "url": "/wiki/wax/examples/",
    "relUrl": "/wax/examples/"
  },
  "7": {
    "id": 7,
    "title": "Hosting your site",
    "content": "",
    "url": "/wiki/wax/hosting/",
    "relUrl": "/wax/hosting/"
  },
  "8": {
    "id": 8,
    "title": "Directory of image files",
    "content": "Directory of Image FilesWax accepts .tiff, .jpeg, .png, and .pdf files and assumes relatively high resolution. For best results, resolution should be as standard as possible across the collection.RequirementsFor Wax to work, each source image file must be named to match its pid in the metadata exactly. (See: the Metadata guide).For example, say the pid for your record in the metadata is obj45 and that it represents a single jpeg image. You’d name your source image obj45.jpeg.If another item, e.g., obj46 represents a pdf document, you’d name its source file obj46.pdf. And lastly, if theres an item obj47 representing a group of images, you’d make a sub directory called obj47 and fill it with source images, e.g., recto.jpg and verso.jpg.",
    "url": "/wiki/wax/preparing-your-collection-data/image-data/",
    "relUrl": "/wax/preparing-your-collection-data/image-data/"
  },
  "9": {
    "id": 9,
    "title": "System requirements",
    "content": "System requirementsYou’ll need modern Ruby (&amp;gt;=2.4) with Bundler,  Git, ImageMagick, and GhostScript. You can check your versions with the steps below, or follow a full Installation guide.Check for Ruby:$ ruby -v  ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin15]Check for Bundler:$ bundler -v  Bundler version 1.16.1Check for Git:$ git --version  git version 2.19.0To process images, you will also need to have ImageMagick and Ghostscript installed and functional.Check ImageMagick:$ convert -version  Version: ImageMagick 6.9.9-20 Q16 x86_64 2017-10-15 http://www.imagemagick.org  Copyright: (c) 1999-2017 ImageMagick Studio LLCCheck Ghostscript:$ gs -version  GPL Ghostscript 9.21 (2017-03-16)  Copyright (c) 2017 Artifex Software, Inc.  All rights reserved.",
    "url": "/wiki/wax/system-requirements/",
    "relUrl": "/wax/system-requirements/"
  },
  "10": {
    "id": 10,
    "title": "Ed.",
    "content": "Minicomp/Ed.AboutEd is a Jekyll theme designed for textual editors based on minimal computing principles, and focused on legibility, durability, ease and flexibility.One of our most pressing and ever revolving needs as scholars is to pass on our textual artifacts from one generation to another. The art of textual editing, among other practices, has helped many cultures to remember and interpret for centuries. Alas, that art is practiced and encouraged in its highest form by a dwindling number of scholars. In a digital environment the problem is compounded by the difficulties of the medium. While vast repositories, and “e-publications” appear on the online scene yearly, very few manifest a textual scholar’s disciplined attention to detail. In contrast, most textual scholars who have made the leap to a rigorous digital practice have focused on markup, relying on technical teams to deploy and maintain their work. This makes your average scholarly digital edition a very costly, and therefore limited affair.As we see it, a minimal edition is one that aims to reduce the size and complexity of the back and front end, and the learning curves for the user and the producer. Out of-the-box, this theme can help you build a simple reading edition, or a traditional scholarly edition with footnotes and a bibliography without breaking the bank. In our estimate, these are the two most immediately useful type of editions for editors and readers. An edition produced with Ed consists of static pages whose rate of decay is substantially lower than database-driven systems. As an added bonus, these static pages require less bandwith. Our hope is that our approach can help beginners or veterans deploy beautiful editions with less effort, that it can help us teach a ‘full stack’ in one academic semester, allow us to care for our projects at less cost, and perhaps, just perhaps, allow us to generate high-quality editions on github.io in large quantities based on the git-lit model by Jonathan Reeve. We’re coming for you, Kindle!Sample Ed editions.  Our sample site is the first edition built with Ed.  Fugitive Verses: Popular Reprinted Poetry from Nineteenth Century Newspapers  mini lazarillo: A minimal edition of the Lazarillo de Tormes  Making and Knowing: The BnF Ms Fr 640 in Translation  Daisy Miller: A Comedy in Three ActsCurrent Features  Templates for narrative, drama and poetry  Responsive design for mobile phones, tablets and PCs.  Relatively easy to learn and teach  Works well in high- or low- bandwitdh scenarios  Easier for digital archives and libraries to preserve  Open source, open access  Unobtrusive footnotes  Metadata in Dublin Core and OpenGraph to play nice with Zotero, libraries and social media.  Automatic table of content generation  Simple search functionality  Annotations via hypothes.is  Optional: Ability to generate well-formatted bibliographies and linked citationsGetting StartedPrerequisitesThis documentation was built with beginners in mind, but has the necessary information for more seasoned producers.To install and use Ed you will be using your terminal. If you need a refresher, I highly recommend “The Command Line Crash Course.” Working knowledge of HTML and CSS is also taken for granted. If you’re new to HTML and CSS, you may want to check out the relevant courses on codecademy.com.Jekyll does not run very well on Windows machines for now. If you are using Windows, this theme won’t work for you, but we hope that you simply deploy our principles, and parts of our stylesheet, on a system like Hugo, which does work on Windows.Installing Ed: EasyThe easy way to do this is not necessarily the more robust, and may simply not work on your system. The easy way could also be called the ‘lucky’ way. It will work if your system is ready for Ed. Two major caveats to keep in mind if you go the easy route: a) You may run into problems later when some Ed components need updating; and, b) You may run into conflicts if you run several Ruby environments for different projects. That said, if you just want to quickly try Ed, and you don’t run into problems installing, this is perhaps the best approach.If you’re using a Mac, make sure you have the appropriate version of XCode command line tools for your OSX. Using the terminal’s cd command, switch to the directory where you want to install your project. Once inside the folder, you are ready to download and start using Ed. Enter each of these lines into your terminal (remember to ignore the $):$ git clone https://github.com/minicomp/ed.git$ cd ed$ gem install bundler$ bundle installThat’s it. To see if Ed is working properly we will take advantage of Jekyll’s built in server. You can build the first version of your site and run the jekyll server at the same time by entering:$ jekyll serveIf at any point during this process you had an error you could not resolve, move on to the next section. If the site was rendered fine, copy the url from your terminal log and paste it into your browser of choice (I recommend Firefox). This url usually looks something like this http://127.0.0.1:4000/ed. At this point you should be looking at your very own working version of Ed:Installing Ed: RobustThe first step to install Ed is to download the source files from GitHub. To do so you must have git installed on your computer. You probably have git already, but if you don’t, the easiest way is probably to install Github Desktop (even though we will be using git and github from the terminal in this tutorial). Mac users may want to ensure they have Xcode and its command line tools installed as well. To check if git is running on your system enter the following line on your terminal (remember to ignore the $):$ git --versionIf you don’t get an error, you’re good to go. Using the cd command on your terminal, navigate to the folder where you keep your web projects. Once you’re in the folder where you want Ed to live, download it from github using the following line (remember you can copy and paste):$ git clone https://github.com/minicomp/ed.gitAt this point you should navigate inside your Ed project folder and stay there until further notice:$ cd edJekyll is a Ruby gem (Ruby’s name for software packages). The best way to ensure you have the right environment is to use Ruby Version Manager, or rvm, and the latest stable version of Ruby. To install rvm and a recent version of Ruby at the same time, follow the instructions on rvm’s site. Remember to add --ruby=2.3.0 at the end of the curl command to install ruby at the same time.After the process runs succesfully, read the last few lines generated by the terminal. You will see final instructions for making rvm run. Once you finish the process, check to see if rvm is running by entering:$ rvm --versionIf you don’t get an error, you’re ready for the next step. If you do get an error, and don’t feel comfortable troubleshooting on the terminal, this is a good opportunity to reach out to a friend who can help. You can leave me a note on the issues page, for example. I’ll try to get to it as soon as my other commitments permit. If you’re comfortable troubleshooting on your own, I recommend Jekyll’s own troubleshooting documentation. Another great strategy for troubleshooting on the terminal is to copy and paste the errors you receive (sans personal information) into your favorite search engine.The next step is to create a gemset for your jekyll projects. A gemset is a set of gems. If you don’t create and use a gemset, every gem you install will be applied system-wide. This is not necessarily a bad thing, but if you will have several projects with several setups, this strategy will serve you well in the long run. To create a gemset:$ rvm gemset create edTo use the gemset you just created:$ rvm gemset use edN.B. Everytime you open a new tab or window on your terminal you need to declare your gemset using rvm gemset use ed, or else it will revert to (default).Now that rvm and Ruby are set up, we’re ready to install our first gem: Bundler. Bundler is a gem that allows you to install many gems at the same time using Gemfiles, which is a simple list of specific gems that lives in your project folder. Once you install it, you will be ready to run the Gemfile I provided in the source files. To install Bundler:$ gem install bundlerYou’re very close. Now that Bundler is installed, the final step is to install the right version of Jekyll. To do so run the Gemfile this way (remember you must be inside the ed folder for this to work):$ bundle installIf you don’t get any errors, Ed should work at this point. To see if Ed is working properly we will take advantage of Jekyll’s built in server. You can build the first version of your site and run the jekyll server at the same time by entering:$ jekyll serveIf you are running multiple Ruby environments using bundler, you will need to add bundle exec to the command:$ bundle exec jekyll serveCopy the url from your terminal log and paste it into your browser of choice (I recommend Firefox). This url usually looks something like this http://127.0.0.1:4000/ed. At this point you should be looking at your very own working version of Ed:Installing Ed: Replacing an existing Jekyll themeEd, like Jekyll, is also a gem. Jekyll gives you the option to switch themes, as long as those themes are gems as well. If you have existing content and would like to use Ed, you need to add the following line to your _config.yml file, usually at the bottom:theme: &quot;ed.&quot;You also need to add the gem to your Gemfile file:gem &quot;ed.&quot;Make sure to replace the version number with the one you need. I will do my best to document what changes come with each new gem. If your current theme does not have a Gemfile, you would need to create one and add the line above. The Gemfile is a plain text file like all other files in Jekyll, and should not have a file extension.After these files have been modified, you need to update your Bundle in the terminal:$ bundle updateWhen using the gem on top of a previous theme, you will not have all the files of a full Ed install immediately available to you. More importantly, you may not have a _texts folder. You need to create one or copy them from a full installation of Ed. You might also want to add the search and index file. The gem comes bundled with all these files once you install it on your system, but they won’t be in the same folder as your project. To locate them you can refer to the Jekyll documentation for gem-based themes. With some previous themes you might need to erase lingering files that interfere with the functioning of Ed. This can be an advanced operation I can’t do justice to here. At that point you might need to familiarize yourself with the architecture of Jekyll, or pay close attention to errors when you try to serve the site, and reverse-engineer from there.Going forward, updating to a new version of Ed is as simple as changing the release version and running the bundle update. I will try to keep changes in the actual markup to a minimum, but will let users know if any changes require a global find and replace in your editions.JekyllEd is a Jekyll theme. That means you will need some familiarity with Jekyll to take advantage of its full potential. While running a Jekyll site is a bit more involved than Wordpress and other similar tools, the payoff in the long term is worth the effort to learn it. If you are new to Jekyll, I recommend you take a look at “How (and Why) to Generate a Static Website Using Jekyll” at ProfHacker, Amanda Visconti’s excellent Building a static website with Jekyll and GitHub Pages on The Programming Historian and Jekyll’s own documentation to start getting a sense of how it works.Once you have gone through these tutorials, you can get started using Ed by replacing the sample texts included in in the _texts folder in Ed with your own edited texts. Remember to always and only edit files in Ed using a plain text editor, and not a word processor. I’m composing this file using a plain text editor called Sublime Text.An easy way to make new texts is to copy an existing text, replace the content and rename the file. Remember to always use the jekyll convention for naming files: your-title.md. You should also make sure that all your texts have the YAML front matter (the information at the top of the file). YAML stands for “YAML Ain’t Markup Language”—no disrespect to XML—and it’s the main way that Jekyll handles named data. Here’s an example of YAML front matter:---layout: poemtitle: &quot;Cahier d'un retour au pays natal&quot;author: Aimé Césaire---Besides replacing content and creating new texts, you will probably  want to edit the _config.yml file to replace the boilerplate information we provided with your own personalized information in the relevant categories. Avoid replacing the information in categories that are not clear to you. Make sure to use proper YAML formatting when writing in the _config.yml file. Here’s a good reference source in case you have doubts.Markdown and kramdownEd is designed for scholars and amateur editors who want to produce either a clean reading edition or a scholarly annotated edition of a text. The main language we use to write in the Jekyll environment is called Markdown. To learn more about the Markdown family, see Dennis Tenen and Grant Wythoff’s “Sustainable Authorship in Plain Text using Pandoc and Markdown.”Our version of Jekyll uses a special Markdown processor called kramdown. The processor can be said to use it’s own ‘flavor’ of Markdown, and sometimes the Markdown syntax will be different than other flavors of Markdown. Kramdown is convenient for scholars because of the way it handles footnotes. You can become familiar with the kramdown syntax in the kramdown documentation. Another way to become familiar is to examine the sample text source files we provided.ComponentsGenresEd offers three different layouts: poem, narrative and drama. The genre is indicated in the YAML front matter on your texts. The templates that govern how these genres are displayed can be found in the _layouts folder. Using these layouts will allow you to tweak the stylesheets according to your different needs. Out of the box, Ed contains some special instructions for poetry in its stylesheets that allow you to deal with some of the peculiarities of poetry layouts.To indicate lines in poetry we use the line syntax from Markdown:- Hold fast to dreams- For if dreams die- Life is a broken-winged bird- That cannot fly.- Hold fast to dreams- For when dreams go- Life is a barren field- Frozen with snow.To indent specific lines we take advantage of a feature in kramdown that allows us to indicate classes for a line. This approach still allows the line to be readable while editing.- {:.indent-3} But O heart! heart! heart!- {:.indent-4} O the bleeding drops of red,- {:.indent-5} Where on the deck my Captain lies,- {:.indent-6} Fallen cold and dead.The - at the beginning of each line indicates that these are lines. The {:.indent-3} is what we need to in order to indicate the indent value for that line. Values can range from 1-10. You can expand the range or adjust the values in the Ed stylesheet (_ed.scss) in the _sass folder.The example from Raisin in the Sun shows us that we don’t need much special markup for theater as long as we use CAPITAL LETTERS for speakers. Italics for directions are easy enough. Just use * around the words you want to italicize.Narrative of the Life of Frederick Douglass shows us an example of narrative that includes footnotes and quoted poetry. See the sections below for how to accomplish these different effects.FootnotesFootnotes are the bread and butter of scholarship. Kramdown makes footnotes a fairly simple affair:- O Captain! my Captain! rise up and hear the bells;- Rise up—for you the flag is flung—for you the bugle[^fn2] trills,...[^fn2]: The bugle is a small trumpet implicated in the military industrial complex.These footnotes can be placed anywhere, but they will always be generated at the bottom of the document. To have a multi-paragraph footnote you need to start the footnote text on the next line after the footnote anchor and indent it:[^fn3]:\tUgh pinterest fixie cronut pitchfork beard. Literally deep\tcold-pressed distillery pabst austin.\tTypewriter 90's roof party poutine, kickstarter raw\tdenim pabst readymade biodiesel umami chicharrones XOXO.The footnotes system provided by kramdown does have one limitation: It generates the numeration for you automatically, and it only allows you to have one set of footnotes for a text. In some cases we have to separate the author’s footnotes from our own, in others we want to represent the author’s own footnote style. In these cases we have to use HTML. Here’s the example from Narrative of the Life:... At this time, Anna,&amp;lt;sup&amp;gt;&amp;lt;a href=&quot;#fn2&quot; id=&quot;ref2&quot;&amp;gt; *&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; my intended wife, came on;...&amp;lt;sup id=&quot;fn2&quot;&amp;gt;*&amp;lt;/sup&amp;gt; She was free. [&amp;amp;#x21a9;&amp;amp;#xfe0e;](#ref2)Notice the double HTML Entity (hex), &amp;amp;#x21a9;&amp;amp;#xfe0e;, used at the end of the footnote to return us to the top. The first hex is the ↩︎ symbol proper. The second assigns the proper variant glyph. This is a necessary hack while we wait for Apple devices to stop turning everything into unseemly emojis.BlockquotesNarrative of the Life also includes several blockquotes. You can also find another example of blockquote use in the footnote of “O Captain! My Captain!” Simple blockquotes are simple enough in kramdown:&amp;gt; This is to certify that I, the undersigned, have given the bearer, my servant, full liberty to go to Baltimore, and spend the Easter holidays.&amp;gt;&amp;gt; Written with mine own hand, &amp;amp;c., 1835.  &amp;gt; WILLIAM HAMILTON,To use a line break in block elements add two spaces after the end of the line where you want the break. You can’t see them after &amp;amp;c., 1835. but they are there.Things get a bit complicated when we want to use poetry inside the block or when the block is included in another block element, like a footnote. Here’s the last two stanzas from “A Parody” in Narrative of the Life, which shows an example of a blockquote of poetry:...&amp;gt; - Two others oped their iron jaws,&amp;gt; - And waved their children-stealing paws;&amp;gt; - There sat their children in gewgaws;&amp;gt; - By stinting negroes' backs and maws,&amp;gt; - They kept up heavenly union.&amp;gt; ^&amp;gt; - All good from Jack another takes,&amp;gt; - And entertains their flirts and rakes,&amp;gt; - Who dress as sleek as glossy snakes,&amp;gt; - And cram their mouths with sweetened cakes;&amp;gt; - And this goes down for union.{:.poetry}The {:.poetry} tag at the end tells the processor to think of the lines above it as poetry. The {:.poetry} tag is an example of kramdown class assignments for block-elements. Because this segment of poetry exists in the ‘narrative’ layout, and because it is part of a blockquote, we need to signal to the processor to process poetry this way, so that the right class is invoked in the stylesheet. Notice also the ^ separating the stanzas. This bit of kramdown syntax helps us separate the stanzas while staying within the blockquote. The good news is this is the most complex kramdown syntax layout you will encounter in Ed.PagesYour editions are treated as collections in Ed. Other web pages in your site exist outside the _texts folder. The homepage, for example, is constructed from the index.html file found on the root folder of your Ed project.You will notice that the homepage in particular has a .html file ending instead of a .md ending. All template files in Jekyll are HTML, and the index behaves as a template file. Although these files are mostly written in HTML, notice that they still contain YAML front matter and liquid tags. To edit the homepage replace the content on the file shipped with Ed, making sure that your changes to index.html are written in valid HTML. The same goes for the template files in the _layouts folder.Ed also comes with a search page, search.html. This page implements elastic lunr, “a lightweight full-text search engine in Javascript for browser search and offline search.” This simple search page can be useful if you have large collections of texts. If you don’t, and don’t feel the need, go ahead and delete it along with the assets/js folder.Besides the homepage and the search page, Ed ships with an About page, about.md and a documentation page, documentation.md, i.e. this page. As you can see, these are regular .md files. You can replace the contents of each file using normal kramdown syntax. This also applies to any new page you create, which you should remember to save with an .md extension. When editing the bibliography.md file, be careful not to replace the liquid tag that generates your bibliography, unless you don’t want to have a bibliography at all.Tables of ContentYou will find three kinds of Tables of Content in Ed. The first example is in the list of Sample Texts in the Homepage. This list is generated using the Liquid Templating language. This is one of the major components of Jekyll, and I recommend you deepen your knowledge of it if you want to modify the logic that automates much of Ed. Here is the code that generates the Sample Texts list on the homepage:&amp;lt;div class=&quot;toc&quot;&amp;gt;  &amp;lt;h2&amp;gt;Sample texts&amp;lt;/h2&amp;gt;  &amp;lt;ul class=&quot;post&quot;&amp;gt;    &amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;As you can see, the liquid tags {% %} and {{ }} are embedded into the HTML. Those with {% %} often use programmatic logic, as is the case here. If you are not already familiar with programming languages, you may need to start elsewhere. I recommend learning Ruby, since this is the language used to build jekyll and jekyll-scholar in the first place (it’s also the first programming language I used, so I’m biased). The {{ }} simply pulls data from your project. In the example above it pulls the title from each ‘post’, i.e. each edited text. As you may have noticed already, we are basically adapting the blogging features of Jekyll to our own ends, what Cuban designer and theorist Ernesto Oroza would call “technological dissobedience.”The second kind of table of content is exemplified in this documentation. If you open the source file for the documentation, you will notice at the top this snippet:## Contents{:.no_toc}* ToC{:toc}This is the kramdown way. The first tag, {:.no_toc} tells the processor not to add ## Contents to the ToC. The second part creates an empty list and then tells the processor to replace it with a table of contents based on headers in the document. You can use this syntax in any page on the site that uses headers.The third way is slightly more involved, but very useful for long texts. If we add the table of contents to the YAML front matter of a page, Ed will activate the optional table of content sidebar (_includes/sidebar-toc.html) and move the table of contents to a special sidebar for that page. Narrative of the Life uses this method for its table of content. If you would like to replicate this functionality in your own long texts, make sure to use the same syntax:toc:- Title Page- Preface- Letter From Wendell Phillips- Chapter I- Chapter IIThe internal links pointing to the right sections in your document are generated from the title names automatically. In order for the links to work the names on section headings must contain the same words as the section headers. The punctuation and capitalization is irrelevant. If you can figure out how Ed accomplishes this trick, you have graduated from the Ed school of minimal editions.BibliographiesIf you want to include a small bibliography, and you feel it would be easier to write it out directly, Ed can help you render it with hanging indentation.  To achieve this effect make sure to use the .bibliography class in an ordered list. For example:1. Douglass, Frederick et al. Narrative of the Life of Frederick Douglass: An American Slave. Charlottesville, Va.: University of Virginia Library, 1996. Open WorldCat. Web. 17 Apr. 2016.2. Hansberry, Lorraine, and Robert Nemiroff. A Raisin in the Sun. Rep Rei edition. New York: Vintage, 2004. Print.{.bibliography}Which should display like this:  Douglass, Frederick et al. Narrative of the Life of Frederick Douglass: An American Slave. Charlottesville, Va.: University of Virginia Library, 1996. Open WorldCat. Web. 17 Apr. 2016.  Hansberry, Lorraine, and Robert Nemiroff. A Raisin in the Sun. Rep Rei edition. New York: Vintage, 2004. Print.To help us style and generate bibliographies and citations automatically, Ed can use the jekyll-scholar gem by Sylvester Keil. To learn more about the gem beyond the basic instructions below, make sure to read the documentation on the jekyll-scholar GitHub page. Keep in mind, though, that installing jekyll-scholar and working with it may be a bit difficult for beginners.If you can get over the hurdles, jekyll-scholar can save you enormous amounts of time in the long term for your citation and bibliographic work. To begin, you must move the contents of the jekyll-scholar starter kit in your optional folder into the root folder. This will effectively replace the original _config.yml and Gemfile files, and add a _bibliography folder, and the bibliography.md and Rakefile files. To enable jekyll-scholar you must re-run bundle install again.If everything goes smoothly, you should be able to start using jekyll-scholar at this point. The first thing you may want to do is provide Jekyll with your own bibliographic information in the form of a .bib file to replace the content of the references.bib file we’ve provided in the _bibliography folder.To make it easy to create your own version of this file and to keep track of your bibliography for your project, in general I recommend you use Zotero. To export from Zotero in this format select the references you need from within your Zotero library, right click and select export in... and choose the BibLaTeX format. Rename your file to references.bib and move it into the _bibliography folder. You are, of course, free to create your references.bib file using any method you prefer as long as it is a BibTeX file.Because as textual editors we are more likely than not to use citations in footnotes or pages that contain footnotes, and because footnotes will be necessarily generated at the bottom of the page, Ed also needs a separate page for your Bibliography or works cited. This is the role of the bibliography.md file. Feel free to edit the sample text, but make sure to leave the following line intact:&amp;#123;% bibliography %&amp;#125;To link your citations to the bibliography page, instead of writing them by hand, you can use the cite function in jekyll-scholar:&amp;#123;% cite cesaire_discourse_2001 %&amp;#125;Here’s the breakdown:  cite is the jekyllscholar command.  cesaire_discourse_2001 is the unique ID for Césaire’s Discourse on Colonialism entry included in the reference.bib file.Note that our jekyll-scholar starter kit comes ready for MLA style. To use Chicago style or more advanced citation features, refer to the documentation on jekyll-scholar to make the appropriate changes.Publishing your site on Github Pages with jekyll-scholarIf you install jekyll-scholar, or most other plugins in Jekyll, you will need a workaround to publish your site on Github Pages, which only runs in ‘safe mode.’ I’ve provided a slightly modified version of a Rakefile originally created by Robert Rawlins that will help you accomplish this task. Once you are ready to publish, switch to your gh-pages branch and run the following command:$ rake ed:publishTips and Tricks  The folding sidebar menu is generated from the sidebar.html file in the _includes folder. The top menu items are generated automatically from your pages. The bottom menu items are manually written in HTML. This structure can allow you to add external links. If you don’t have that many pages, you may choose to do all the links by hand.  For more hand-crafted layouts—such as the title page in The Narrative of the Life—you may choose to work directly with HTML. One of the great advantages of working with the kramdown processor is that we have a lot of flexibility to mix HTML with the kramdown syntax. Note though, that even in the case of the title page, you can achieve these effects using kramdown syntax.  Make sure to add horizontal rules, ---, to separate sections in your texts. This creates a more pleasant layout.  You can clean unnecessary folders and files from the original Ed package before publishing your site. This will help you reduce overhead. For example, you can erase this page, the sample texts and the syntax.css file (used for styling code).  Consider providing tips for your readers on how to make their font bigger or smaller by taking advantage of Command + + and Command + -. Or returning to the top of the page using Command + Up Arrow. Part of the philosophy behind Ed is to avoid duplicating features that are already easily available in most web ecosystems.  If you want to allow annotations on your site, consider providing a via.hypothes.is link. Our sample site can be annotated, for example, using the following link: https://via.hypothes.is/http://minicomp.github.io/ed/, which readers can access on the sidebar. Once you’ve indicated your own URL in the config file, the link will update automatically. Make sure to visit hypothes.is to learn more.  Ed includes metadata in the headers that makes it easier for users of Zotero, and other systems to grab bibliographic information for the site and individual texts. Our metadata functionality may not be enough to generate a full proper citation. Consider providing visible citation information in your about page or homepage.  Make sure to deepen your knowledge of the building blocks of Ed: Jekyll, YAML and Liquid. A great list of resources can be found in the blog “Jekyll for Web Designers”.  Our base themes Poole/Lanyon allow for easily customization of the interface. You can, for example, switch the position of the sidebar, change the theme colors and overlay options. To learn more check out the Lanyon documentation, and make sure to try the green, .theme-base-0b, it’s really nice.  You can change the look and feel of the site as a whole by changing the color-scheme in the _config.yml file. If you want to have more granularity, short of editing the css, you can change the variable values in the assets/css/style.scss file.  In the optional folder you will find a sample xslt to help you get started converting TEI to Ed. You will also find css for adding pop-up “balloons” or tooltips to your texts.PublishingTo a UNIX serverPublishing and Ed edition can be done in one of two ways. One way is to host it on a server you rent, own or have access to. Most mortals pay a hosting provider to host their sites. I recommend Reclaim Hosting, which is run by scholars for scholars. If you are affiliated with a university, chances are that your institution provides you with a UNIX account and a bit of server space. Since Jekyll generates a full static site for you, that means you can park it there too. To do so you need to build the site first. If you have been keeping your eye on your project by using jekyll serve, chances are you have a current built site in your project folder labelled _site.If you don’t already, you can build one easily by using the following Jekyll command:$ jekyll buildOr, again, if you have multiple environments:$ bundle exec jekyll serveUsing an FTP client like Filezilla, or SSH on your terminal, you need to push the contents of the _site folder to the folder on your server where you would like your project to exist. Depending on your host provider, you may be able to receive help from the sys admins with this step.Please refer to the note below on base urls to make sure your new links work on your new site.To GitHub pagesThe second option is to publish your site for free on GitHub Pages.Whether you decide to publish on GitHub pages or not, we recommend that you still use git and GitHub to version your edition and make the data available via another channel other than your webpage. This is one of the great advantages of using our system, increasing the chances of survival of your work and opening new audiences for it.If you do decide to use the GitHub pages option, please make sure to read the note below on base urls.To publish on GitHub pages, you must have a copy of the repository in GitHub. That means you also need an account there. Once you’ve created the repository that you will use, you must link your local repository to the one on GitHub. Notice that because you cloned the original source files from my repository, it will be linked to my repository (to which you don’t have writing privileges) until you do this step. Instructions for changing the remote URL can be found here.The usual way of doing it is to create a different git branch called gh-pages within your local repository for your site. This is a branch is published by GitHub by default. GitHub also gives you the option to select any branch you want to publish, including the master branch.In the following I use the gh-pages branch. To create and use that branch use the following command:$ git checkout -b gh-pagesOnce you are using that branch, you are ready to publish your site. To do so use simply push the gh-pages branch to github:$ git push origin gh-pagesYou can now access your site using an address that looks like http://your-username.github.io/your-project-name. The sample page for Ed, for example, is hosted at minicomp.github.io/ed.A note on your base urlWhen you publish on a subfolder—automatic on GitHub pages—many of your links will break unless you indicate the name of your sub-folder in the baseurl value in your _config.html file. In addition, you need to make sure that your site-wide links (your links to your CSS files, for example) are preceded by the /wiki tag. The base Ed install already uses this system, so you can simply replace the value /ed in your baseurl to /your-project-slug.If on the other hand you are running your site on a root folder, simply erase /ed, but do make sure to leave the single quotes:baseurl: ''That should do it. If you have suggestions on how to improve Ed, make sure to leave us a line on our issues page, or send us a pull request.Happy editing!Alex GilApril 2016Copied from the original at https://minicomp.github.io/ed/documentation/",
    "url": "/wiki/ed/",
    "relUrl": "/ed/"
  },
  "11": {
    "id": 11,
    "title": "Using theme components",
    "content": "Using theme componentsIn the parlance of Jekyll, components are called includes and live in the _includes folder. They are just like shortcodes in WordPress in that they’re quick, reusable blocks.Wax comes with a lot of includes that you can browse on Github here. The easiest way to get started using Wax includes is by seeing how they’re used in the Wax demo site and trying them out on your own.includeswax/footer.html, wax/head.html, and wax/header.html are used by the wax/default.html layout, so you likely won’t need to use them on your own. The rest are covered below.wax/inline-image.html →Usage:{% include wax/inline_image.html collection=[item collection key] pid=[item pid] %}wax/mirador_compare.html →Usage:{% include wax/mirador_compare.html m1=[link to manifest 1] m2=[link to manifest 2] %}wax/parallax.html →Usage:{% include wax/parallax.html collection=[item collection key] pid=[item pid] %}wax/collection/gallery.html →Usage:{% include wax/collection/gallery.html collection=[collection key] facet_by=[key to group items by] %}wax/collection/interactive_metadata.html →Usage:{% include wax/collection/interactive_metadata.html collection=[collection key] %}wax/image_viewer/leaflet.html →Usage:{% include wax/image_viewer/leaflet.html collection=[item collection key] pid=[item pid] %}wax/image_viewer/mirador.html →Usage:{% include wax/image_viewer/mirador.html collection=[item collection key] pid=[item pid] %}wax/image_viewer/simple.html →Usage:{% include wax/image_viewer/simple.html collection=[item collection key] pid=[item pid] %}wax/item/metadata.html →Usage:{% include item/metadata.html %}wax/item/pagination.html →Usage:{% include wax/item/pagination.html meta=[metadata structure label/value] %}",
    "url": "/wiki/wax/using-theme-components/",
    "relUrl": "/wax/using-theme-components/"
  },
  "12": {
    "id": 12,
    "title": "Home",
    "content": "MinicompMinicomp is a collaborative effort in embedding minimal computing principles (e.g. Minimal Maintenance, Minimal Dependencies, and Minimal Connectivity) in digital humanities methods.We create workflows, components, and proofs-of-concept, and the results are rarely turnkey. As such, we welcome contributors of all kinds and define contributions broadly.This site includes documentation for our main projects, and will likely serve as a repository for blog posts and tutorials in the future.ProjectsEd.A gem-packaged theme and workflow for creating minimal critical editions with Jekyll.See moreWaxAn extensible workflow for creating minimal scholarly exhibitions with Jekyll and Rake.See more",
    "url": "/wiki/",
    "relUrl": "/"
  },
  "13": {
    "id": 13,
    "title": "Running the tasks",
    "content": "Running the main tasksThe order in which you run the following rake tasks is important! For example, the  derivatives tasks give information to the metadata file, so it needs to be run before the pages are generated from the metadata. And the lunr task indexes the collection markdown pages, so those pages need to exist before it is run.Step 1: Make sure you have the tasks available.You can check by running bundle exec rake --tasks. You should see a list of tasks printed in your shell window.Step 2: Generate the image derivatives for your collection from the source images.You’ll do this by running one of the wax:derivatives tasks.Step 3: Generate the collection pages from the metadata records.You’ll do this by running the wax:pagemaster task.Step 4: Generate the search index and default UI.You’ll do this by running the wax:lunr task.",
    "url": "/wiki/wax/running-the-tasks/",
    "relUrl": "/wax/running-the-tasks/"
  },
  "14": {
    "id": 14,
    "title": "Deprecated docs",
    "content": "",
    "url": "/wiki/wax/deprecated/",
    "relUrl": "/wax/deprecated/"
  },
  "15": {
    "id": 15,
    "title": "Using theme layouts",
    "content": "Using theme layoutsWax five layouts for you to use and/or expand on: wax/default.html, wax/page.html, wax/exhibit.html, wax/collection_item.html, and wax/reuse_page.html. (See the on Github.)You can tell a page to use a layout by adding it to the page’s front-matter, for example:. _exhibits/my-exhibit.md---title: 'My Exhibit'layout: wax/exhibit---Or you can make your own layout file that inherits from a Wax layout, for example the qatar_item.html layout which inherits from wax/collection_item:. _layouts/qatar_item.html---layout: wax/collection_itemimage_viewer: 'leaflet'pagination: truemeta:  - label: 'Object Label'    value: page.label  - label: 'Artist'    value: page.artist  - label: 'Object Type'    value: page.object_type  - label: 'Location'    value: page.location  - label: 'Current Location'    value: page.current_location  - label: 'Date'    value: page. _date  - label: 'Source'    value: page.source---",
    "url": "/wiki/wax/using-theme-layouts/",
    "relUrl": "/wax/using-theme-layouts/"
  },
  "16": {
    "id": 16,
    "title": "Preparing your collection data",
    "content": "Preparing your collection dataWhat you’ll needTo create a collection for your Wax exhibition site, you need two things: a file of metadata records and a directory of image files.",
    "url": "/wiki/wax/preparing-your-collection-data/",
    "relUrl": "/wax/preparing-your-collection-data/"
  },
  "17": {
    "id": 17,
    "title": "Setting up your site",
    "content": "Setting up your siteThere are a few ways to get started building your Wax site, depending on your needs. You will need to decide in advance if you’d like to host your site with GitHub Pages, because GitHub pages does not allow most Ruby gem Jekyll themes to be used on build. Though advanced Jekyllers can start a Jekyll site from scratch and add the wax_theme gem, it is recommended that you clone the demo site and swap in your collection data and exhibition content instead.",
    "url": "/wiki/wax/setting-up-your-site/",
    "relUrl": "/wax/setting-up-your-site/"
  },
  "18": {
    "id": 18,
    "title": "Wax",
    "content": "Minicomp/WaxWhat is Wax?Wax is an extensible workflow for producing scholarly exhibitions with minimal computing principles.It’s comprised of: a few Ruby gems for processing image data and associated metadata (wax_tasks, wax_iiif), a Jekyll theme (wax_theme), and (hopefully soon!) a lot of documentation and recipes for creating, deploying, and maintaining digital exhibitions (wax_docs).The exhibition sites created by Wax are static.This means they consist of flat HTML, CSS, and JavaScript files that don’t need to communicate in a complex way back to a server. This makes them cheaper, safer, and generally easier to maintain—as long as you’re willing to learn some new skills.The skills needed to create Wax sites are fundamental.This means they are largely transferable for use in other digital projects. ‘Learning Wax’ does not mean learning how to use a platform. It involves learning the basics of web development, data management, and plain text editing while leveraging a few great open source libraries and frameworks along the way.Wax keeps the collection presentation separate from the collection data.The Wax workflow starts with making standardized image files and metadata records and builds around them, handling canonical information, scholarly content, and site styling differently and deliberately. This makes it easier for you or others to reuse and reimagine your collection data in other contexts, or to preserve the collection when it comes time to sunset the exhibition.Who is Wax for?Wax was created for individuals and groups who either don’t have or don’t want to use a lot of resources to create their scholarly exhibitions. It’s best suited for folks who are willing to take on some technical responsibility in exchange for a lot of flexibility.This is to say that Wax has a relatively high but general-purpose learning curve. To get the most out of Wax, you should have some familiarity with:  Using an interactive shell (e.g., Bash/Terminal) to install and interact with programs, files, and directories on your local computer.  Using Git and GitHub to version control and collaborate on projects.  Using Jekyll to generate static sites.  Creating and normalizing data files (e.g., CSVs, JSOM, YAML)  Using file-naming conventions and best practices.  Editing HTML, CSS, and some JavaScript.However, Wax is also great for teaching the skills above! For examples of digital humanities pedagogy through the creation of Wax exhibitions, check out this workshop, this GitHub repository, and this custom Wax site.So what does Wax look like?Below is a diagram to give you a zoomed-out view. In summary, you create a file of metadata records for your collection (in CSV, YAML, or JSON format), organize your collection image files, and put both in a Jekyll site folder. After updating your configuration, you run a few command line tasks to prepare the data and metadata for use by the Jekyll site. Then Jekyll uses special layouts and Wax components to build the exhibition and it spits them out as static pages.From there, you can run tests on your site to catch errors and decide where and how to put it online with greater flexibility.How can I get help?You can submit questions, issues, and feature requests on GitHub or ask informally using your GitHub login on Gitter chat.",
    "url": "/wiki/wax/",
    "relUrl": "/wax/"
  },
  "19": {
    "id": 19,
    "title": "Installation guide",
    "content": "Coming soon!",
    "url": "/wiki/wax/system-requirements/installation-guide/",
    "relUrl": "/wax/system-requirements/installation-guide/"
  },
  "20": {
    "id": 20,
    "title": "wax:lunr",
    "content": "wax:lunrWax:lunr is the task responsible for generating a search index for your site to use.You can run the task with:bundle exec rake wax:lunrThis will:      Look for the lunr_index configuration you set up in your _config.yml file. (See: Updating your configuration)        For each collection you gave the lunr_index, it will look for the markdown pages and add the fields and/or content from each page to the index.        It will write the index to the filename you gave (file).  With default UIInstead of manually writing your own search UI Javascript file, you can optionally tell wax:lunr to write one for you by running the task with UI=true:bundle exec rake wax:lunr UI=trueThis will:      Generate the search index (see above)        Genereate a default UI Javascript file to the filename you gave (ui) in your lunr_index config.  ",
    "url": "/wiki/wax/running-the-tasks/lunr/",
    "relUrl": "/wax/running-the-tasks/lunr/"
  },
  "21": {
    "id": 21,
    "title": "Metadata file",
    "content": "Metadata fileWax can work with CSV, JSON, and YAML files, though CSVs are recommended. Below is the CSV that powers the qatar collection in the Wax demo site.                pid          artist          location          label          _date          object_type          current_location          source          order          thumbnail          full          manifest                                  obj1              Al-Hajj Hafiz Muhammad Nuri              Turkey              The Dala'il al-Khayrat of al-Juzuli              1801              manuscript              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Al-Hajj_Hafiz_Muhammad_Nuri,_Turkey,_1801_-_The_Dala%27il_al-Khayrat_of_al-Juzuli_-_Google_Art_Project.jpg              00              /img/derivatives/simple/obj1/thumbnail.jpg              /img/derivatives/simple/obj1/full.jpg              /img/derivatives/iiif/obj1/manifest.json                                obj2              Unknown              Egypt              Sulwan Al-Muta'a              14th century              manuscript              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Unknown,_Egypt_or_Syria,_14th_Century_-_Sulwan_Al-Muta%27a_-_Google_Art_Project.jpg              01              /img/derivatives/simple/obj2/thumbnail.jpg              /img/derivatives/simple/obj2/full.jpg              /img/derivatives/iiif/obj2/manifest.json                                obj3              Unknown              Egypt              Map of the World              15th century              map              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Unknown,_Egypt,_15th_Century_-_Map_of_World_-_Google_Art_Project.jpg              02              /img/derivatives/simple/obj3/thumbnail.jpg              /img/derivatives/simple/obj3/full.jpg              /img/derivatives/iiif/obj3/manifest.json                                obj4              Unknown              Iran              Faridun crosses the River Dijla, fol. 33v              1525 - 1535              manuscript              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Unknown,_Iran_-_Page_from_the_Shahnama_of_Shah_Tahmasp_-_Google_Art_Project.jpg              03              /img/derivatives/simple/obj4/thumbnail.jpg              /img/derivatives/simple/obj4/full.jpg              /img/derivatives/iiif/obj4/manifest.json                                obj5              Unknown              Iran              Panel from Iran              1600 - 1625              panel              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Unknown,_Iran_-_Panel_from_Iran_-_Google_Art_Project.jpg              04              /img/derivatives/simple/obj5/thumbnail.jpg              /img/derivatives/simple/obj5/full.jpg              /img/derivatives/iiif/obj5/manifest.json                                obj6              Unknown              Iran              Diwan of Jami Manuscript              16th century              manuscript              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Unknown,_Iran,_16th_Century_-_Diwan_of_Jami_Manuscript_-_Google_Art_Project.jpg              05              /img/derivatives/simple/obj6/thumbnail.jpg              /img/derivatives/simple/obj6/full.jpg              /img/derivatives/iiif/obj6/manifest.json                                obj7              Unknown              Iran              Page from the Shahnama              1525 - 1535              manuscript              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Unknown,_Iran,_16th_Century_-_Page_from_the_Shahnama_-_Google_Art_Project.jpg              06              /img/derivatives/simple/obj7/thumbnail.jpg              /img/derivatives/simple/obj7/full.jpg              /img/derivatives/iiif/obj7/manifest.json                                obj8              Unknown              Iran              Silk Tapestry Depicting the story of Leila and Majnun              1550 - 1650              panel              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Unknown,_Iran,_16th_or_16th_Century_-_Silk_Tapestry_Depicting_the_story_of_Leila_and_Majnun_-_Google_Art_Project.jpg              07              /img/derivatives/simple/obj8/thumbnail.jpg              /img/derivatives/simple/obj8/full.jpg              /img/derivatives/iiif/obj8/manifest.json                                obj9              Mihr 'Ali              Iran              Portrait of Fath 'Ali Shah              1816              portrait              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Mihr_%27Ali,_Iran,_1816_-_Portrait_of_Fath_%27Ali_Shah_-_Google_Art_Project.jpg              08              /img/derivatives/simple/obj9/thumbnail.jpg              /img/derivatives/simple/obj9/full.jpg              /img/derivatives/iiif/obj9/manifest.json                                obj10              Unknown              Iran              Portrait of Hasan 'Ali Mirza Shuja al-Saltana              1800 - 1850              portrait              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Unknown,_Iran,_early_19th_Century_-_Portrait_of_Hasan_%27Ali_Mirza_Shuja_al-Saltana_-_Google_Art_Project.jpg              09              /img/derivatives/simple/obj10/thumbnail.jpg              /img/derivatives/simple/obj10/full.jpg              /img/derivatives/iiif/obj10/manifest.json                                obj11              Unknown              Iran              Portrait of Sheikh Ali Mirza              1800 - 1850              portrait              The Museum of Islamic Art, Qatar              https://commons.wikimedia.org/wiki/File:Unknown,_Iran,_early_19th_Century_-_Portrait_of_Sheikh_Ali_Mirza_-_Google_Art_Project.jpg              10              /img/derivatives/simple/obj11/thumbnail.jpg              /img/derivatives/simple/obj11/full.jpg              /img/derivatives/iiif/obj11/manifest.json                                obj12              Bahādur Fīrūz, ʻAbd Allāh Khān              Middle East and North Africa              Excerpt from 'The Book of Horses' (فَرَس نامه [رسالة في الخيول)              Around 1628 - 1658              manuscript              Qatar National Library              https://www.wdl.org/en/item/10668/              11              /img/derivatives/simple/obj12_00/thumbnail.jpg              /img/derivatives/simple/obj12_00/full.jpg              /img/derivatives/iiif/obj12/manifest.json                RequirementsWax requires each object record to have a globally unique pid (as its persistent identifier) and a label field. The other fields are optional and up to you for describing your collection.The object pid values cannot have whitespace or special characters. They should follow “snake case”, where letters are lowercase, special characters are removed, and spaces are replaced by underscores, e.g.Object #57 would be object_57.CSV headers (or JSON keys) should also use snake case. For another example the heading Current Location, City should be replaced with current_location_city.Some fields are needed for Jekyll and Wax, and should not be used in your metadata file. For example, Jekyll has rules for its date field. You should avoid this key and use _date, like below.The fields thumbnail, full, and manifest (seen below) are generated by Wax when you process your collection images. You should not manually create these fields, and should avoid these keys in your metadata.TipsTo normalize and validate your metadata records, try Open Refine. You can facet fields and make sure there aren’t hidden spaces or sneaky typos in your values.SavingWhen you are ready to export your metadata file, save it as your collection name in its simplest form, for example documents.csv, items.json, frick.yml. This will make your job easier later.",
    "url": "/wiki/wax/preparing-your-collection-data/metadata/",
    "relUrl": "/wax/preparing-your-collection-data/metadata/"
  },
  "22": {
    "id": 22,
    "title": "wax:pagemaster",
    "content": "wax:pagemasterWax:pagemaster is the task responsible for generating a page for each of your collection items and is the simplest task to configure and use.You can run the task with:bundle exec rake wax:pagemaster YOUR_COLLECTION_NAMEThis will:      Look for the metadata file you specified in your _config.yml file under collections &amp;gt; YOUR_COLLECTION_NAME &amp;gt; metadata &amp;gt; source (See: Updating your configuration)        Generate a directory named after your collection prepended with an underscore (e.g., _qatar or _your_collection_name)        Generate pages into that directory for each record named after its pid value  ",
    "url": "/wiki/wax/running-the-tasks/pagemaster/",
    "relUrl": "/wax/running-the-tasks/pagemaster/"
  },
  "23": {
    "id": 23,
    "title": "Quick reference",
    "content": "Quick reference  Clone the demo. (Make sure to clone the gh-pages branch if you want to use GitHub pages!)  Run bundle install to install dependencies.  Delete the demo-specific collection files and directories (i.e., _data/raw_images/qatar, _data/qatar.csv, _qatar, js/lunr-index.json, js/lunr-ui.js).  Change _layouts/qatar-item.html to a layout for your collection.  Swap in your own directory of images and metadata file for each collection.  Add your collection(s) to _config.yml (referencing your new layout), set up your lunr_index config, change site title, url, baseurl, etc.  Run bundle exec rake wax:derivatives:iiif &amp;lt;collection-name&amp;gt; OR bundle exec rake wax:derivatives:simple &amp;lt;collection-name&amp;gt; to generate image derivatives and add their paths to your metadata file.  Run bundle exec rake wax:pagemaster &amp;lt;collection-name&amp;gt; to generate the collection item pages.  Run bundle exec rake wax:lunr UI=true to generate the Elasticlunr.js search index with a default UI to use.  Run bundle exec jekyll serve to preview your site in progress.  Adjust the menu settings in _config.yml, update the content on the pages, change the metadata for your collection pages, and so on until your site is ready.  Push the site to a new repository of your own and enable GitHub pages.Speed runLinks  Get help and/or chat on Gitter  Submit formal issues  Jekyll documentation",
    "url": "/wiki/wax/quick-reference/",
    "relUrl": "/wax/quick-reference/"
  },
  "24": {
    "id": 24,
    "title": "Updating your configuration",
    "content": "Updating your configurationBelow you’ll find explanations for the wax demo site configuration and instructions for you to update it for your own exhibition site.Main settingsThe main settings are direct from Jekyll. You can learn more through their configuration guides.title:            'Minicomp/Wax'description:      'Minimal Exhibitions with Jekyll'url:              ''baseurl:          '/wax'copyright:        'Example copyright org, 2018'Collection settingsWax leverages Jekyll collections for much of itsfunctionality, therefore some of the keys below are fromJekyll while others are Wax-specific.Below, two collections exhibits and qatar are configured. They control files in _exhibits and _qatar respectively. exhibits contains regular Markdown essays, so it only needs output: true in its config. But qatar is a Wax image collection and needs more info to be processed:collections:  exhibits:    output: true  qatar:    output: true    layout: 'qatar_item'    metadata:      source: 'qatar.csv' # path to the metadata file within `_data`    images:      source: 'raw_images/qatar' # path to the directory of images within `_data`            variable      type accepted      description      used by                  collections      hash      the site collections      wax and jekyll              output      true/false      whether or not to output the collection to HTML.      jekyll              layout      string      which layout in _layouts the collection pages should use. you should create this file in _layouts and it should use the wax/collection_item layout. note: you do not add the .html extension at the end; this is a Jekyll convention.      wax and jekyll              metadata:source      string      path to the collection’s metadata file within the _data directory      wax              images:source      string      path to the collection’s directory of images within the _data directory      wax                  There are more configuration variables for collections within metadata and images for [advanced use cases]({{ ‘/wax/advanced/’      absolute_url }}).      Search settings            The lunr_index variable can create multiple indexes (the dash represents an item in a list in YAML), though one is recommended. For Wax to use search it needs two files: a JSON search index and a javascript search UI to search for and display results. Both can be created by Wax using the [lunr task]({{ ‘/wax/running-the-tasks/lunr/’      absolute_url }}) and the information below.      lunr_index:  - file: 'js/lunr-index.json' # file the index will get written to    ui:   'js/lunr-ui.js' # path to the search UI file    collections:      qatar:        content: false # whether or not to index page content        fields: # the metadata fields to index          - artist          - location          - label          - _date          - object_type          - current_location            variable      type accepted      description      used by                  lunr_index      list      list of search indexes      wax              file      string      the path (within the root of the site) to write the index to      wax              ui      string      the path (within the root of the site) to write the UI to      wax              collections      hash      which collections (as defined in collections above) to index      wax              content      true/false      within a collection: whether or not to index the page content in addition to the metadata in the front matter      wax              fields      list      within a collection: the metadata fields to index      wax      Menu settingsThe menu defined in _config.yml is used by the theme’s header and can accept nested / dropdown menus.menu:  - label: 'About'    sub:      - label: 'Wax'        link: '/about/'      - label: 'Documentation'        link: 'https://minicomp.github.io/wiki/#/wax/'      - label: 'Credits'        link: '/credits/'  - label: 'Exhibits'    sub:      - label: 'Local and Remote IIIF Manifests'        link: '/exhibits/a/'      - label: 'Inline Parallax Image'        link: '/exhibits/b/'      - label: 'Inline Image References'        link: '/exhibits/c/'  - label: 'Browse'    link: '/collection/'  - label: 'Search'    link: '/search/'  - label: 'Reuse'    link: '/reuse/'            variable      type accepted      description      used by                  menu      list      list of menu items      wax              label      string      the human-readable label for the link or dropdown      wax              link      string      the relative (internal) or absolute (external) link      wax              sub      list      a list of sub items for a dropdown      wax      Footer settingsThe theme’s footer uses the site’s title, description, and copyright by default and optionally takes a list of navigation links and logos from the variables below.footer:  links:    - label: 'GitHub'      link: 'https://github.com/minicomp/wax'    - label: 'Credits'      link: '/credits'    - label: 'Contact'      link: 'https://gitter.im/minicomp/wax/'  logos:    - img: '/assets/logo.png'    - img: 'https://example.com/logo.png'      link: 'https://example.com'",
    "url": "/wiki/wax/setting-up-your-site/updating-your-configuration/",
    "relUrl": "/wax/setting-up-your-site/updating-your-configuration/"
  }
}
